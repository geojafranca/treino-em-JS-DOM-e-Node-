
números :

  int : Number.parseInt
  float : Number.parseFloat
  definido automaticamente : Number


string :

  nome.toString
  String


como usar templateString :

  usando `` para englobar o código, coloque a váriavel entre chaves, depois de um $.
  ex.: 

    var nome = 'geovani'

    `Olá, sou o ${nome}`


formatação geral : 

  nome1.replace('', '') // troca oq está dentro das primeiras aspas pelo que está dentro das segundas.


formatação de strings :

  s.lenght // quantos caracteres a string tem
  s.toUpperCase() // deixa todas as letras maiúsculas
  s.toLowercase() // deixa todas as letras minúsculas 


formatação de números :

  n1.toFixed(n2) // altera o número de casas
  n1.toLocaleString('pt-BR', {style: 'currency', currency : 'BRL'}) // altera o formato monetário de acordo com o país escolhido
  
alerts : 

  window.alert ("minha primeira mensagem"); // janela com um alerta
  window.confirm ("está gostando de javascript ?"); // janela com um botão de ok e cancelar
  window.prompt ("Qual é o seu nome ?"); // janela com uma pergunta a ser respondida



escrever na tela :

  document.write = escreve um texto na tela
  document.writeln = escreve um texto e pula pra linha seguinte
  (famoso print)




operadores : 

  ordem de precedência :
    
    ()
    **
    * / % 
    + -

aritméticos :

  5 + 2 = 7
  5 - 2 = 3
  5 * 2 = 10
  5 / 2 = 2.5
  5 % 2 = 1 (resto da divisão)
  5 ** 2 = 25 (potencia) 

relacionais :

  5 > 2 -> true
  7 < 5 -> flase
  8 >= 8 -> true
  9 <= 7 -> false
  5 == 5 -> true
  4 != 4 -> false
 
  esses valores sempre serão boolean (true or false)

  5 == '5' -> true. == é responsável por verificar se o valor é o msm.
  5 === '5' -> flase. === é responsável por verificar se são identicos, tanto em valor quanto em tipos.

atribuição : 

lógicos : 

  *em ordem*

  ! -> negação -> operador unário (ou true ou false)

  && -> conjunção (e) -> binário :
    true e true -> true
    true e false -> false
    false e true -> false
    false e false -> false

  || -> disjunção (ou) - > binário :
    true e true -> true
    true e false -> true
    false e true -> true
    false e false -> false

ternário : 

  ? e :

  |teste| ? |true| : |false|

  ex.:
    media > 7 ? 'aprovado' : 'reprovado'


métodos de acesso : 

  marcas == tag --> getElementsByTagName()
  ID --> getElementById()
  nome -- > getElementsByName()
  classe == class --> getElementsByClassName
  seletor --> querySelector() / querySelectorAll()



  document.write(p.innerText)[0] -> escreve o texto escolhido, mas sem a formatação.
  document.write(p.innerHTML)[0] -> escreve o texto escolhido
 


DOM : Document Object Model.

DOM events : 

  mouseenter : quando o mouse entra no espaço da div.

  mousemove : quando o mouse se move dentro do espaço da div.

  mousedown : quando o mouse pressiona o espaço da div.
 
  mouseup : quando o mouse que antes estava pressionado é solto.

  click : quando o mouse clica no espaço da div.

  mouseout : quando o mouse sai do espaço da div.



funções : 

  blocos : delimitado entre os sinais de chaves '{}', tem que ser nomeado com 'function' (function ação(parametro){})



ex. de event dentro do html :

  |   <div id="area" onclick="clicar()" onmouseenter="entrar()" onmouseout="sair()">
          Interaja...
      </div>
  <script>
      function clicar() {
          var a = document.getElementById('area')
          a.innerText = 'você interagiu'
          a.style.background = 'red'
      }

      function entrar() {
          var b = document.getElementById('area')
          b.innerText = 'o mouse está na area'
      }

      function sair() {
          var c = document.getElementById('area')
          c.innerText = 'o mouse saiu da area'
          c.style.background = 'green'
      }

  </script> |



ex. de function dentro do js :

  | <div id="area">
          Interaja...
      </div>
  <script>

      var a = document.getElementById('area')
    
      a.addEventListener('click', clicar)
      a.addEventListener('mouseenter', entrar)
      a.addEventListener('mouseout', sair)

      function clicar() {
        a.innerText = 'você interagiu'
        a.style.background = 'red'
      }

      function entrar() {
          a.innerText = 'o mouse está na area'
      }
  
      function sair() {
          a.innerText = 'o mouse saiu da area'
          a.style.background = 'green'
      } |



condições :
  
  sequências :
    os códigos são executados em sequência. mas caso queira executar uma linha de código msm que ela n esteja em sequência, usaremos as *condições*.

  ex. de condições : if, else e elseif. dividas em simples e aninhada.

ex.:
 function checar(){
        var txtv = document.querySelector('#txtvel')
        var res = document.querySelector('#res')
        var vel = Number (txtv.value)
        res.innerHTML = `Sua velocidade atual é de ${vel}km/h`

        if (vel > 60) {
            velm.innerHTML = `Você ultrapassou o limite de velocidade. MULTADO`
        }
    }
  
como pegar uma data/hora atual do usuário : 

  var agora = new Date ()
  var hora = agora.getHours()
  



condições multiplas :

  switch (expressão) {
    case valor 1 :
      console.log
      break  

    case valor 2:
      console.log 
      break
                
    case valor 3:
      console.log
      break   
    
    default:
    break
  }

  *O BREAK É MUITO IMPORTANTE*



  ex. de alteração do css através do js: document.body.style.background = '#23232e'



  como validar um radio button :
     var fsex = document.getElementsByName('radsex')
     var genero = ''
     if (fsex[0].checked) {
      genero = 'homem'
     } else {
      genero = 'mulher'
     }


  como criar um elemento com um ID em js : 
    var img = document.createElement('img')
    img.setAttribute('id', 'foto') 
    resp.appendChild(img)  




    calculadora em node usando while : 

    var c = 1
var n = 5
while (c <= 5) {
    var s = n*c
    console.log(`${n} X ${c} = ${s} `)
    c++
       
}

calculadora em node usando for :
  for (let c = 0; c <= 10; c++) {
    var n1 = 10
    var s = n1*c
    console.log(`${n1} X ${c} = ${s}`)
}


array (vetor) : vaga a = [ , , ]

uma array é uma váriavel composta por elementos, cada elemento é composta por um valor e chave de identificação.


ex. de criação de arrays e adição de elementos : 
  let num = [ 5 , 8 , 4 ] 
  console.log(num[0])
  console.log(num[1])
  console.log(num[2])
  num[3] = 6 *ou num.push(6)*

  console.log(num)


  para saber o comprimento e um array : num.length+
  para ordenalos do menor ao maior : num.sort()


  como listar todos os elementos de um vetor : 



    let num = [5, 4, 3, 2, 7]   
    for (let pos = 0; pos < num.length ; pos++) {
    console.log(num[pos])
}

como achar a chave de um valor específico dentro de um vetor : 
let num = [5, 8, 2, 9, 3]
let pos = num.indexOf(8)
console.log(`esse valor existe, a chave dele é : ${pos}`)









livros :


Fica aqui algumas dicas de livros:
- JavaScript - guia definitivo
Autor - David Flanagan
- JavaScript - guia do programador
Mauricio Samy Silva

https://github.com/cezaraugusto/You-Dont-Know-JS
https://github.com/felipe-augusto/clean-code-javascript

To no cel na deu pra postar o link dos dois primeiros. Abrs






